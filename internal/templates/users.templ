package templates

import (
	"catcam_go/internal/db"
	"catcam_go/internal/store/users"
	"fmt"
)

templ AddUserForm(formData db.User, errors map[string]string) {
	<form
		hx-post="/user"
		hx-swap="outerHTML"
		class="bg-white shadow-md rounded px-8 pt-6 pb-8 mb-4"
		id="add-user-form"
	>
		<div class="mb-4">
			{{ id := "username" }}
			<label for={ id } class="block text-marino-700 text-sm font-bold mb-2">Username</label>
			<input
				type="text"
				name={ id }
				class="shadow appearance-none border rounded w-full py-2 px-3 text-marino-700 leading-tight focus:outline-none focus:shadow-outline"
				value={ formData.Username }
				required
			/>
			@maybeValidationError(errors, id)
		</div>
		<div class="mb-4">
			{{ id = "password" }}
			<label for={ id } class="block text-marino-700 text-sm font-bold mb-2">Password</label>
			<input
				type="password"
				id={ fmt.Sprintf("add-user-form-%s", id) }
				name={ id }
				class="shadow appearance-none border rounded w-full py-2 px-3 text-marino-700 leading-tight focus:outline-none focus:shadow-outline"
				required
			/>
			@maybeValidationError(errors, id)
		</div>
		<div class="mb-4">
			{{ id = "confirm-password" }}
			<label for={ id } class="block text-marino-700 text-sm font-bold mb-2">Confirm Password</label>
			<input
				type="password"
				name={ id }
				class="shadow appearance-none border rounded w-full py-2 px-3 text-marino-700 leading-tight focus:outline-none focus:shadow-outline"
				required
				onkeyup="this.setCustomValidity('')"
				hx-on:htmx:validation:validate="
					if (this.value !== document.getElementById('add-user-form-password').value) { 
						this.setCustomValidity('Passwords must match');
						htmx.find(#add-user-form).reportValidity();
					}"
			/>
			@maybeValidationError(errors, id)
		</div>
		<div class="flex items-center justify-between">
			<button
				type="submit"
				class="bg-marino-500 hover:bg-marino-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline"
			>
				Add User
			</button>
			@spinner()
		</div>
	</form>
}

templ NoUsers() {
	<div id="no-users" class="text-center text-marino-700">
		<p>No users found</p>
	</div>
}

templ UsersList(users []db.User, userStore *users.UserStore) {
	<div class="users">
		<article class="bg-white shadow-md rounded px-8 pt-6 pb-8 mb-4">
			<ul id="">
				for _, user := range users {
					@User(user)
				}
			</ul>
			if len(users) <= 0 {
				@NoUsers()
			}
		</article>
	</div>
}

templ User(user db.User) {
	{{ cssSelector := fmt.Sprintf("user-%d", user.ID) }}
	{{ deleteResponseCssSelector := fmt.Sprintf("delete-response-%d", user.ID) }}
	<li id={ cssSelector } hx-swap="outerHTML" hx-ext="response-targets" class="mb-4">
		<a
			href="#"
			class="block bg-white shadow-md rounded px-8 pt-6 pb-8 mb-4"
			hx-delete={ fmt.Sprintf("/user/%d", user.ID) }
			hx-confirm={ fmt.Sprintf("Are you sure you want to delete %s?", user.Username) }
			hx-target-error={ "#" + deleteResponseCssSelector }
			hx-swap="innerHTML"
		>
			<div class="flex items-center justify-between">
				<div>
					<strong class="text-marino-700">{ user.Username }</strong>
					<p class="text-marino-500">
						if user.CreatedAt.Valid {
							Created at { user.CreatedAt.Time.Format("2 Jan 2006") }
						} else {
							Unknown creation date
						}
					</p>
				</div>
				<div class="text-right">
					<p id={ deleteResponseCssSelector } class="text-flamingo-600"></p>
				</div>
				@spinner()
			</div>
		</a>
	</li>
}

templ UserToAppend(user db.User) {
	<div id="users-list" hx-swap-oob="beforeend">
		@User(user)
	</div>
	<div id="no-users" hx-swap-oob="delete"></div>
}
